#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Author   : Emanuel Haupt <ehaupt@FreeBSD.org>
Purpose  : Find the fastest pkg mirror
Requires : curl
License  : BSD3CLAUSE
"""

import shlex
import subprocess
import re
import sys
import argparse
import json
from operator import itemgetter
import dns.resolver


def speedtest(url):
    """ Returns bytes per second value """
    cmd = 'curl -Lo /dev/null -skw "%%{speed_download}" %s' % (url)
    proc = subprocess.Popen(
        shlex.split(cmd), stdout=subprocess.PIPE, stderr=subprocess.PIPE
    )
    out, err = proc.communicate()

    if err:
        raise Exception("curl returned an error")

    if out:
        return float(out)

    return None


class PkgMirror:
    """ class to handle pkg mirrors """

    def __init__(self, mirror):
        self.benchmark_files = (
            "http://%%SERVER%%/%%ABI%%/latest/packagesite.txz",
            "http://%%SERVER%%/%%ABI%%/latest/meta.txz",
            "http://%%SERVER%%/%%ABI%%/latest/digests.txz",
            "http://%%SERVER%%/%%ABI%%/latest/Latest/pkg.txz",
        )
        self.mirror = mirror
        self.abi = self.get_abi()

    @classmethod
    def get_abi(cls):
        """ get ABI string from pkg -vv """
        cmd = "/usr/local/sbin/pkg-static -vv"
        proc = subprocess.Popen(
            shlex.split(cmd), stdout=subprocess.PIPE, stderr=subprocess.PIPE
        )
        out, err = proc.communicate()

        if err:
            raise Exception("pkg-static returned an error")

        match = re.search(r"\nABI\s+=\s+\"([^\"]*)\"", out.decode("utf-8"))
        if match:
            return match.group(1)

        return None

    def get_urls(self):
        """ returns a list of possible files to download from a mirror """
        self.get_abi()
        urls = []
        for rfile in self.benchmark_files:
            rfile = re.sub("%%SERVER%%", self.mirror, rfile)
            rfile = re.sub("%%ABI%%", self.abi, rfile)
            urls.append(rfile)

        return urls


def get_mirrors():
    """ returns a list of all mirrors for pkg.freebsd.org """
    resolver = dns.resolver.Resolver()
    try:
        pkg_mirrors = resolver.resolve("_http._tcp.pkg.freebsd.org", "SRV")
    except AttributeError:
        pkg_mirrors = resolver.query("_http._tcp.pkg.freebsd.org", "SRV")

    return pkg_mirrors


def argument_parser():
    """ Parsers CLI arguments and displays help text, handles all the Cli stuff """
    parser = argparse.ArgumentParser(
        description="Script for finding and configuring fastest FreeBSD pkg mirror"
    )

    parser.add_argument(
        "-j",
        "--json",
        action="store_true",
        help="only show basic information in JSON format",
    )

    argument = vars(parser.parse_args())
    return argument


def main():
    """ script starts here """
    cli_arguments = argument_parser()
    stats = []
    mirrors = get_mirrors()
    for mirror in mirrors:
        if mirror.priority > 10:
            pkg = PkgMirror(mirror.target.to_text(omit_final_dot=True))
            for url in pkg.get_urls():
                bytes_per_second = speedtest(url)
                if bytes_per_second:
                    mirror_name = mirror.target.to_text(omit_final_dot=True)
                    if not cli_arguments["json"]:
                        print(
                            ("%s: %s KB/s" % (mirror_name, (bytes_per_second / 1000)))
                        )
                    stats.append(
                        {
                            "mirror_name": mirror_name,
                            "bytes_per_second": bytes_per_second,
                        }
                    )
                    break

    stats_sorted = sorted(stats, key=itemgetter("bytes_per_second"), reverse=True)

    if cli_arguments["json"]:
        print(json.dumps(stats_sorted))
    else:
        pkg_cfg = (
            'FreeBSD: { url: "http://%s/${ABI}/latest" }'
            % stats_sorted[0]["mirror_name"]
        )
        print(
            f"\nFastest:\n{stats_sorted[0]['mirror_name']}: {stats_sorted[0]['bytes_per_second']/1000} KB/s"
        )
        print("\n")
        print("Write configuration:")
        print("mkdir -p /usr/local/etc/pkg/repos/")
        print("echo '" + pkg_cfg + "' \\\n\t> /usr/local/etc/pkg/repos/FreeBSD.conf")
        print("\n")


# Main section of the script
if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:  # Catch Ctrl-C
        sys.exit(0)
    except SystemExit as sysexit:
        if sysexit.code != 0:
            raise
        else:
            sys.exit(0)
    except:
        raise
